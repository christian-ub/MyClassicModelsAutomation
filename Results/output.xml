<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.2 on darwin)" generated="20200601 13:31:11.323" rpa="false">
<suite id="s1" name="Test Scenario 04" source="/Users/christianlindeberg/PycharmProjects/MyClassicModelsAutomation/TestSuites/Test_Scenario_04.robot">
<test id="s1-t1" name="TC_04_01: Sum of sales all offices">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.521" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.493" endtime="20200601 13:31:11.529"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.493" endtime="20200601 13:31:11.530"></status>
</kw>
<kw name="Set Variables" library="TC_04_01">
<kw name="Set Variables" library="TC_04_01_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_01</arg>
</arguments>
<msg timestamp="20200601 13:31:11.531" level="INFO">${TestCase} = TC_04_01</msg>
<status status="PASS" starttime="20200601 13:31:11.531" endtime="20200601 13:31:11.531"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Sum_All_Office_Sales</arg>
</arguments>
<msg timestamp="20200601 13:31:11.531" level="INFO">${Test_Column_1} = Sum_All_Office_Sales</msg>
<status status="PASS" starttime="20200601 13:31:11.531" endtime="20200601 13:31:11.532"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Pending'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.532" level="INFO">${TestStatus} = 'Pending'</msg>
<status status="PASS" starttime="20200601 13:31:11.532" endtime="20200601 13:31:11.532"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.530" endtime="20200601 13:31:11.532"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.530" endtime="20200601 13:31:11.532"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_01">
<kw name="Sum of sales all offices" library="TC_04_01_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.533" level="INFO">'Pending'</msg>
<status status="PASS" starttime="20200601 13:31:11.533" endtime="20200601 13:31:11.533"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT sum(amount) FROM payments</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.533" level="INFO">Executing : Query  |  SELECT sum(amount) FROM payments </msg>
<msg timestamp="20200601 13:31:11.535" level="INFO">${QueryResults} = ((Decimal('8853839.23'),),)</msg>
<status status="PASS" starttime="20200601 13:31:11.533" endtime="20200601 13:31:11.536"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${QueryResults[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.536" level="INFO">${TestValue_Column_1} = 8853839.23</msg>
<status status="PASS" starttime="20200601 13:31:11.536" endtime="20200601 13:31:11.536"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.537" level="INFO">8853839.23</msg>
<status status="PASS" starttime="20200601 13:31:11.536" endtime="20200601 13:31:11.537"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.537" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.537" endtime="20200601 13:31:11.537"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.533" endtime="20200601 13:31:11.537"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.532" endtime="20200601 13:31:11.537"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_01">
<kw name="Verify Retrieved Data" library="TC_04_01_SQL">
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.538" endtime="20200601 13:31:11.538"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.538" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.538" endtime="20200601 13:31:11.539"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.538" endtime="20200601 13:31:11.539"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.537" endtime="20200601 13:31:11.539"></status>
</kw>
<kw name="Insert New Data" library="TC_04_01">
<kw name="Save Current Row Count" library="TC_04_01_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.539" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_01' </msg>
<msg timestamp="20200601 13:31:11.542" level="INFO">${current_row_count} = 70</msg>
<status status="PASS" starttime="20200601 13:31:11.539" endtime="20200601 13:31:11.542"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.542" level="INFO">${PREVIOUS_ROW_COUNT} = 70</msg>
<status status="PASS" starttime="20200601 13:31:11.542" endtime="20200601 13:31:11.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.543" level="INFO">70</msg>
<status status="PASS" starttime="20200601 13:31:11.543" endtime="20200601 13:31:11.543"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.539" endtime="20200601 13:31:11.543"></status>
</kw>
<kw name="Insert New Data" library="TC_04_01_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.543" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.544" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.543" endtime="20200601 13:31:11.544"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.544" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.544" endtime="20200601 13:31:11.545"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.545" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Sum_All_Office_Sales) VALUES ('TC_04_01', '2020-06-01 13:31:11', 'PENDING', 8853839.23) </msg>
<status status="PASS" starttime="20200601 13:31:11.545" endtime="20200601 13:31:11.548"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.543" endtime="20200601 13:31:11.548"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_01_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.548" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_01' </msg>
<msg timestamp="20200601 13:31:11.551" level="INFO">${new_row_count} = 71</msg>
<status status="PASS" starttime="20200601 13:31:11.548" endtime="20200601 13:31:11.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.551" level="INFO">71</msg>
<status status="PASS" starttime="20200601 13:31:11.551" endtime="20200601 13:31:11.551"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.552" endtime="20200601 13:31:11.552"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.552" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.552" endtime="20200601 13:31:11.552"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.548" endtime="20200601 13:31:11.552"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.539" endtime="20200601 13:31:11.552"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_01">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_01_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_01_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.554" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Sum_All_Office_Sales FROM TestScenario_04 WHERE TestCase = 'TC_04_01' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.555" level="INFO">${QueryResults} = (('TC_04_01', '2020-06-01 13:31:11', Decimal('8853839.23000000')),)</msg>
<status status="PASS" starttime="20200601 13:31:11.553" endtime="20200601 13:31:11.555"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.555" endtime="20200601 13:31:11.555"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.555" endtime="20200601 13:31:11.555"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.556" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.556" endtime="20200601 13:31:11.556"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.556" endtime="20200601 13:31:11.556"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.553" endtime="20200601 13:31:11.556"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.553" endtime="20200601 13:31:11.556"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.552" endtime="20200601 13:31:11.556"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_01">
<kw name="Update Newly Inserted Data" library="TC_04_01_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.557" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.557" endtime="20200601 13:31:11.557"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.558" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_01' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.558" endtime="20200601 13:31:11.560"></status>
</kw>
<msg timestamp="20200601 13:31:11.560" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.557" endtime="20200601 13:31:11.560"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.557" endtime="20200601 13:31:11.560"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.557" endtime="20200601 13:31:11.561"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_01">
<kw name="Log All Rows" library="TC_04_01_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.561" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.561" endtime="20200601 13:31:11.562"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.562" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_01' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.564" level="INFO">${QueryResults} = (('TC_04_01', '2020-06-01 13:31:11', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-06-01 12:48:31', 'PASSED', Decimal('88...</msg>
<status status="PASS" starttime="20200601 13:31:11.562" endtime="20200601 13:31:11.564"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.565" level="INFO">(('TC_04_01', '2020-06-01 13:31:11', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-06-01 12:48:31', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-06-01 12:47:53', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-06-01 12:38:54', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-06-01 12:38:09', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-06-01 12:31:45', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-06-01 11:48:06', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-31 17:10:40', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-31 17:07:44', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-31 17:04:04', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 13:25:18', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 13:20:55', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 13:04:19', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:35:39', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:34:21', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:33:17', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:32:31', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:29:50', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:26:24', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:25:52', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:25:23', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:21:04', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:19:54', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:16:57', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:14:36', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-30 12:12:27', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 14:44:54', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 14:43:06', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 14:14:53', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 14:13:16', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 14:12:18', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:56:17', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:52:44', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:48:23', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:46:06', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:39:32', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:37:58', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:35:51', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:34:49', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:33:19', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:31:40', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:30:45', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:29:12', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:27:18', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:20:43', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:18:49', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:16:13', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 13:12:50', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:20:20', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:17:29', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:16:20', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:14:53', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:13:58', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:13:19', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:08:02', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 12:05:35', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 11:28:03', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 11:24:35', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 11:23:33', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 11:08:49', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:24:27', 'PASSED', Decimal('8853839.23000000'), None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:24:16', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:23:51', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:22:44', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:16:08', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:09:28', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:07:49', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:05:04', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:03:06', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 10:01:27', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_01', '2020-05-29 09:59:16', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.565" endtime="20200601 13:31:11.565"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.561" endtime="20200601 13:31:11.565"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.561" endtime="20200601 13:31:11.565"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.566" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.566" endtime="20200601 13:31:11.566"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.565" endtime="20200601 13:31:11.566"></status>
</kw>
<tags>
<tag>TestCase_04_01: Sum of sales all offices</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.492" endtime="20200601 13:31:11.566" critical="yes"></status>
</test>
<test id="s1-t2" name="TC_04_02: Count of sales all offices">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.568" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.567" endtime="20200601 13:31:11.570"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.567" endtime="20200601 13:31:11.570"></status>
</kw>
<kw name="Set Variables" library="TC_04_02">
<kw name="Set Variables" library="TC_04_02_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_02</arg>
</arguments>
<msg timestamp="20200601 13:31:11.571" level="INFO">${TestCase} = TC_04_02</msg>
<status status="PASS" starttime="20200601 13:31:11.571" endtime="20200601 13:31:11.571"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Count_All_Office_Sales</arg>
</arguments>
<msg timestamp="20200601 13:31:11.572" level="INFO">${Test_Column_1} = Count_All_Office_Sales</msg>
<status status="PASS" starttime="20200601 13:31:11.572" endtime="20200601 13:31:11.572"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.572" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.572" endtime="20200601 13:31:11.572"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.571" endtime="20200601 13:31:11.572"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.571" endtime="20200601 13:31:11.572"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_02">
<kw name="Count of sales all offices" library="TC_04_02_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.573" level="INFO">Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.573" endtime="20200601 13:31:11.573"></status>
</kw>
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT orderNumber FROM orders</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.574" level="INFO">Executing : Row Count  |  SELECT orderNumber FROM orders </msg>
<msg timestamp="20200601 13:31:11.577" level="INFO">${QueryResults} = 326</msg>
<status status="PASS" starttime="20200601 13:31:11.573" endtime="20200601 13:31:11.577"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.578" level="INFO">${TestValue_Column_1} = 326</msg>
<status status="PASS" starttime="20200601 13:31:11.577" endtime="20200601 13:31:11.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.578" level="INFO">326</msg>
<status status="PASS" starttime="20200601 13:31:11.578" endtime="20200601 13:31:11.578"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.578" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.578" endtime="20200601 13:31:11.578"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.573" endtime="20200601 13:31:11.578"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.572" endtime="20200601 13:31:11.579"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_02">
<kw name="Verify Retrieved Data" library="TC_04_02_SQL">
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.579" endtime="20200601 13:31:11.579"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.580" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.580" endtime="20200601 13:31:11.580"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.579" endtime="20200601 13:31:11.580"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.579" endtime="20200601 13:31:11.580"></status>
</kw>
<kw name="Insert New Data" library="TC_04_02">
<kw name="Save Current Row Count" library="TC_04_02_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.581" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_02' </msg>
<msg timestamp="20200601 13:31:11.584" level="INFO">${current_row_count} = 69</msg>
<status status="PASS" starttime="20200601 13:31:11.581" endtime="20200601 13:31:11.584"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.585" level="INFO">${PREVIOUS_ROW_COUNT} = 69</msg>
<status status="PASS" starttime="20200601 13:31:11.585" endtime="20200601 13:31:11.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.585" level="INFO">69</msg>
<status status="PASS" starttime="20200601 13:31:11.585" endtime="20200601 13:31:11.585"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.581" endtime="20200601 13:31:11.585"></status>
</kw>
<kw name="Insert New Data" library="TC_04_02_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.586" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.586" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.586" endtime="20200601 13:31:11.587"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.587" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.587" endtime="20200601 13:31:11.587"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.587" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Count_All_Office_Sales) VALUES ('TC_04_02', '2020-06-01 13:31:11', 'PENDING', 326) </msg>
<status status="PASS" starttime="20200601 13:31:11.587" endtime="20200601 13:31:11.589"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.586" endtime="20200601 13:31:11.589"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_02_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.589" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_02' </msg>
<msg timestamp="20200601 13:31:11.592" level="INFO">${new_row_count} = 70</msg>
<status status="PASS" starttime="20200601 13:31:11.589" endtime="20200601 13:31:11.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.592" level="INFO">70</msg>
<status status="PASS" starttime="20200601 13:31:11.592" endtime="20200601 13:31:11.592"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.592" endtime="20200601 13:31:11.593"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.593" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.593" endtime="20200601 13:31:11.593"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.589" endtime="20200601 13:31:11.593"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.580" endtime="20200601 13:31:11.593"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_02">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_02_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_02_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.595" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Count_All_Office_Sales FROM TestScenario_04 WHERE TestCase = 'TC_04_02' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.596" level="INFO">${QueryResults} = (('TC_04_02', '2020-06-01 13:31:11', 326),)</msg>
<status status="PASS" starttime="20200601 13:31:11.594" endtime="20200601 13:31:11.596"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.596" endtime="20200601 13:31:11.596"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.596" endtime="20200601 13:31:11.596"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.597" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.597" endtime="20200601 13:31:11.597"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.597" endtime="20200601 13:31:11.597"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.594" endtime="20200601 13:31:11.597"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.594" endtime="20200601 13:31:11.597"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.594" endtime="20200601 13:31:11.597"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_02">
<kw name="Update Newly Inserted Data" library="TC_04_02_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.598" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.598" endtime="20200601 13:31:11.598"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.599" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_02' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.599" endtime="20200601 13:31:11.601"></status>
</kw>
<msg timestamp="20200601 13:31:11.601" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.598" endtime="20200601 13:31:11.601"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.598" endtime="20200601 13:31:11.601"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.598" endtime="20200601 13:31:11.601"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_02">
<kw name="Log All Rows" library="TC_04_02_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.602" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.602" endtime="20200601 13:31:11.602"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.603" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_02' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.605" level="INFO">${QueryResults} = (('TC_04_02', '2020-06-01 13:31:11', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-06-01 12:48:31', 'PASSED', None, 326, None, None, None, None, ...</msg>
<status status="PASS" starttime="20200601 13:31:11.602" endtime="20200601 13:31:11.605"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.605" level="INFO">(('TC_04_02', '2020-06-01 13:31:11', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-06-01 12:48:31', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-06-01 12:47:53', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-06-01 12:38:54', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-06-01 12:38:09', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-06-01 12:31:45', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-06-01 11:48:06', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-31 17:10:40', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-31 17:07:44', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-31 17:04:04', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 13:25:18', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 13:20:55', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 13:04:19', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:35:40', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:34:21', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:33:17', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:32:31', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:29:50', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:26:24', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:25:52', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:25:23', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:21:04', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:19:54', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:16:57', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:14:36', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-30 12:12:27', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 14:44:54', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 14:43:06', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 14:14:53', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 14:13:16', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 14:12:18', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:56:17', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:52:44', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:48:23', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:46:06', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:39:32', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:37:58', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:35:51', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:34:49', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:33:19', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:31:40', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:30:45', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:29:12', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:27:18', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:20:43', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:18:49', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:16:13', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 13:12:50', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:20:20', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:17:29', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:16:20', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:14:54', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:13:58', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:13:19', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:08:02', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 12:05:35', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 11:28:03', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 11:23:33', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 11:08:50', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:24:27', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:24:17', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:23:51', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:22:44', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:16:08', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:09:28', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:07:49', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:05:04', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:03:06', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 10:01:27', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None), ('TC_04_02', '2020-05-29 09:59:16', 'PASSED', None, 326, None, None, None, None, None, None, None, None, None, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.605" endtime="20200601 13:31:11.606"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.602" endtime="20200601 13:31:11.606"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.602" endtime="20200601 13:31:11.606"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.606" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.606" endtime="20200601 13:31:11.606"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.606" endtime="20200601 13:31:11.607"></status>
</kw>
<tags>
<tag>TestCase_04_02: Count of sales all offices</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.567" endtime="20200601 13:31:11.607" critical="yes"></status>
</test>
<test id="s1-t3" name="TC_04_03: Average sum of sales all offices">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.608" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.607" endtime="20200601 13:31:11.609"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.607" endtime="20200601 13:31:11.609"></status>
</kw>
<kw name="Set Variables" library="TC_04_03">
<kw name="Set Variables" library="TC_04_03_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_03</arg>
</arguments>
<msg timestamp="20200601 13:31:11.610" level="INFO">${TestCase} = TC_04_03</msg>
<status status="PASS" starttime="20200601 13:31:11.610" endtime="20200601 13:31:11.610"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Avg_Sum_All_Office_Sales</arg>
</arguments>
<msg timestamp="20200601 13:31:11.611" level="INFO">${Test_Column_1} = Avg_Sum_All_Office_Sales</msg>
<status status="PASS" starttime="20200601 13:31:11.610" endtime="20200601 13:31:11.611"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.611" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.611" endtime="20200601 13:31:11.611"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.610" endtime="20200601 13:31:11.611"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.609" endtime="20200601 13:31:11.611"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_03">
<kw name="Average sum of sales all offices" library="TC_04_03_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT sum(amount) FROM payments</arg>
</arguments>
<assign>
<var>${SumOfAllSales}</var>
</assign>
<msg timestamp="20200601 13:31:11.612" level="INFO">Executing : Query  |  SELECT sum(amount) FROM payments </msg>
<msg timestamp="20200601 13:31:11.612" level="INFO">${SumOfAllSales} = ((Decimal('8853839.23'),),)</msg>
<status status="PASS" starttime="20200601 13:31:11.612" endtime="20200601 13:31:11.612"></status>
</kw>
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT City FROM offices</arg>
</arguments>
<assign>
<var>${CountOfOffices}</var>
</assign>
<msg timestamp="20200601 13:31:11.613" level="INFO">Executing : Row Count  |  SELECT City FROM offices </msg>
<msg timestamp="20200601 13:31:11.614" level="INFO">${CountOfOffices} = 7</msg>
<status status="PASS" starttime="20200601 13:31:11.613" endtime="20200601 13:31:11.614"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${SumOfAllSales[0][0]}/${CountOfOffices}</arg>
</arguments>
<assign>
<var>${AverageSalesAmount}</var>
</assign>
<msg timestamp="20200601 13:31:11.615" level="INFO">${AverageSalesAmount} = 1264834.1757142858</msg>
<status status="PASS" starttime="20200601 13:31:11.614" endtime="20200601 13:31:11.615"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>${AverageSalesAmount}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${AverageSalesAmount}</var>
</assign>
<msg timestamp="20200601 13:31:11.615" level="INFO">${AverageSalesAmount} = 1264834.17571429</msg>
<status status="PASS" starttime="20200601 13:31:11.615" endtime="20200601 13:31:11.615"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${AverageSalesAmount}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.616" level="INFO">${TestValue_Column_1} = 1264834.17571429</msg>
<status status="PASS" starttime="20200601 13:31:11.615" endtime="20200601 13:31:11.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.616" level="INFO">1264834.17571429</msg>
<status status="PASS" starttime="20200601 13:31:11.616" endtime="20200601 13:31:11.616"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.617" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.616" endtime="20200601 13:31:11.617"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.611" endtime="20200601 13:31:11.617"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.611" endtime="20200601 13:31:11.617"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_03">
<kw name="Verify Retrieved Data" library="TC_04_03_SQL">
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.618" endtime="20200601 13:31:11.618"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.618" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.618" endtime="20200601 13:31:11.618"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.617" endtime="20200601 13:31:11.618"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.617" endtime="20200601 13:31:11.618"></status>
</kw>
<kw name="Insert New Data" library="TC_04_03">
<kw name="Save Current Row Count" library="TC_04_03_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.619" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_03' </msg>
<msg timestamp="20200601 13:31:11.622" level="INFO">${current_row_count} = 84</msg>
<status status="PASS" starttime="20200601 13:31:11.619" endtime="20200601 13:31:11.622"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.622" level="INFO">${PREVIOUS_ROW_COUNT} = 84</msg>
<status status="PASS" starttime="20200601 13:31:11.622" endtime="20200601 13:31:11.623"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.623" level="INFO">84</msg>
<status status="PASS" starttime="20200601 13:31:11.623" endtime="20200601 13:31:11.623"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.619" endtime="20200601 13:31:11.623"></status>
</kw>
<kw name="Insert New Data" library="TC_04_03_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.624" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.624" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.623" endtime="20200601 13:31:11.624"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.624" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.624" endtime="20200601 13:31:11.624"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.625" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Avg_Sum_All_Office_Sales) VALUES ('TC_04_03', '2020-06-01 13:31:11', 'PENDING', 1264834.17571429) </msg>
<status status="PASS" starttime="20200601 13:31:11.625" endtime="20200601 13:31:11.626"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.623" endtime="20200601 13:31:11.626"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_03_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.627" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_03' </msg>
<msg timestamp="20200601 13:31:11.629" level="INFO">${new_row_count} = 85</msg>
<status status="PASS" starttime="20200601 13:31:11.626" endtime="20200601 13:31:11.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.629" level="INFO">85</msg>
<status status="PASS" starttime="20200601 13:31:11.629" endtime="20200601 13:31:11.629"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.629" endtime="20200601 13:31:11.630"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.630" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.630" endtime="20200601 13:31:11.630"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.626" endtime="20200601 13:31:11.630"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.618" endtime="20200601 13:31:11.630"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_03">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_03_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_03_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.632" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Avg_Sum_All_Office_Sales FROM TestScenario_04 WHERE TestCase = 'TC_04_03' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.633" level="INFO">${QueryResults} = (('TC_04_03', '2020-06-01 13:31:11', Decimal('1264834.17571429')),)</msg>
<status status="PASS" starttime="20200601 13:31:11.632" endtime="20200601 13:31:11.633"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.633" endtime="20200601 13:31:11.633"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.634" endtime="20200601 13:31:11.634"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.635" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.634" endtime="20200601 13:31:11.635"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.634" endtime="20200601 13:31:11.635"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.631" endtime="20200601 13:31:11.635"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.631" endtime="20200601 13:31:11.635"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.630" endtime="20200601 13:31:11.635"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_03">
<kw name="Update Newly Inserted Data" library="TC_04_03_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.636" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.636" endtime="20200601 13:31:11.636"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.637" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_03' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.637" endtime="20200601 13:31:11.639"></status>
</kw>
<msg timestamp="20200601 13:31:11.639" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.636" endtime="20200601 13:31:11.639"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.636" endtime="20200601 13:31:11.639"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.635" endtime="20200601 13:31:11.639"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_03">
<kw name="Log All Rows" library="TC_04_03_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.640" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.640" endtime="20200601 13:31:11.641"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.641" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_03' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.644" level="INFO">${QueryResults} = (('TC_04_03', '2020-06-01 13:31:11', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-06-01 12:48:31', 'PASSED', None, None,...</msg>
<status status="PASS" starttime="20200601 13:31:11.641" endtime="20200601 13:31:11.644"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.644" level="INFO">(('TC_04_03', '2020-06-01 13:31:11', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-06-01 12:48:31', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-06-01 12:47:53', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-06-01 12:38:54', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-06-01 12:38:09', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-06-01 12:31:45', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-06-01 11:48:06', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-31 17:10:40', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-31 17:07:44', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-31 17:04:04', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 13:25:18', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 13:20:55', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 13:04:19', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:35:40', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:34:21', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:33:17', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:32:31', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:29:50', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:26:24', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:25:52', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:25:23', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:21:04', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:19:54', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:16:57', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:14:36', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-30 12:12:27', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 14:44:54', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 14:43:06', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 14:14:53', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 14:13:16', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 14:12:18', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:56:17', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:52:44', 'FAILED', None, None, None, None, None, None, None, 'London', Decimal('1324325.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:52:44', 'FAILED', None, None, None, None, None, None, None, 'San Francisco', Decimal('1337439.58000000'), None, None, None), ('TC_04_03', '2020-05-29 13:52:44', 'FAILED', None, None, None, None, None, None, None, 'Paris', Decimal('2819168.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:52:44', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:48:23', 'FAILED', None, None, None, None, None, None, None, 'London', Decimal('1324325.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:48:23', 'FAILED', None, None, None, None, None, None, None, 'San Francisco', Decimal('1337439.58000000'), None, None, None), ('TC_04_03', '2020-05-29 13:48:23', 'FAILED', None, None, None, None, None, None, None, 'Paris', Decimal('2819168.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:48:23', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:46:06', 'FAILED', None, None, None, None, None, None, None, 'Paris', Decimal('2819168.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:46:06', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:46:06', 'FAILED', None, None, None, None, None, None, None, 'San Francisco', Decimal('1337439.58000000'), None, None, None), ('TC_04_03', '2020-05-29 13:46:06', 'FAILED', None, None, None, None, None, None, None, 'London', Decimal('1324325.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:39:32', 'FAILED', None, None, None, None, None, None, None, 'London', Decimal('1324325.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:39:32', 'FAILED', None, None, None, None, None, None, None, 'San Francisco', Decimal('1337439.58000000'), None, None, None), ('TC_04_03', '2020-05-29 13:39:32', 'FAILED', None, None, None, None, None, None, None, 'Paris', Decimal('2819168.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:39:32', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:37:58', 'FAILED', None, None, None, None, None, None, None, 'London', Decimal('1324325.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:37:58', 'FAILED', None, None, None, None, None, None, None, 'San Francisco', Decimal('1337439.58000000'), None, None, None), ('TC_04_03', '2020-05-29 13:37:58', 'FAILED', None, None, None, None, None, None, None, 'Paris', Decimal('2819168.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:37:58', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:35:51', 'FAILED', None, None, None, None, None, None, None, 'London', Decimal('1324325.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:35:51', 'FAILED', None, None, None, None, None, None, None, 'San Francisco', Decimal('1337439.58000000'), None, None, None), ('TC_04_03', '2020-05-29 13:35:51', 'FAILED', None, None, None, None, None, None, None, 'Paris', Decimal('2819168.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:35:51', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:34:49', 'PENDING', None, None, None, None, None, None, 3, 'London', Decimal('1324325.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:34:49', 'PENDING', None, None, None, None, None, None, 2, 'San Francisco', Decimal('1337439.58000000'), None, None, None), ('TC_04_03', '2020-05-29 13:34:49', 'PENDING', None, None, None, None, None, None, 1, 'Paris', Decimal('2819168.90000000'), None, None, None), ('TC_04_03', '2020-05-29 13:34:49', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:33:19', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:31:40', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:30:45', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:29:12', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:27:18', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:20:43', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:18:49', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:16:13', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 13:12:50', 'PASSED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 12:20:20', 'PENDING', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 11:28:03', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 11:24:35', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 11:23:33', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 11:08:50', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:24:27', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:24:17', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:23:51', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:22:44', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:16:08', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:09:28', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:07:49', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:05:04', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:03:06', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 10:01:27', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None), ('TC_04_03', '2020-05-29 09:59:16', 'FAILED', None, None, Decimal('1264834.17571429'), None, None, None, None, None, None, None, None, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.644" endtime="20200601 13:31:11.645"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.640" endtime="20200601 13:31:11.645"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.640" endtime="20200601 13:31:11.645"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.645" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.645" endtime="20200601 13:31:11.645"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.645" endtime="20200601 13:31:11.646"></status>
</kw>
<tags>
<tag>TestCase_04_03: Average sum of sales all offices</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.607" endtime="20200601 13:31:11.646" critical="yes"></status>
</test>
<test id="s1-t4" name="TC_04_04: Average count of sales all offices">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.647" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.646" endtime="20200601 13:31:11.649"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.646" endtime="20200601 13:31:11.649"></status>
</kw>
<kw name="Set Variables" library="TC_04_04">
<kw name="Set Variables" library="TC_04_04_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_04</arg>
</arguments>
<msg timestamp="20200601 13:31:11.650" level="INFO">${TestCase} = TC_04_04</msg>
<status status="PASS" starttime="20200601 13:31:11.650" endtime="20200601 13:31:11.650"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Avg_Count_All_Office_Sales</arg>
</arguments>
<msg timestamp="20200601 13:31:11.650" level="INFO">${Test_Column_1} = Avg_Count_All_Office_Sales</msg>
<status status="PASS" starttime="20200601 13:31:11.650" endtime="20200601 13:31:11.650"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.650" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.650" endtime="20200601 13:31:11.651"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.649" endtime="20200601 13:31:11.651"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.649" endtime="20200601 13:31:11.651"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_04">
<kw name="Average count of sales all offices" library="TC_04_04_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT orderNumber FROM orders</arg>
</arguments>
<assign>
<var>${CountOfAllSales}</var>
</assign>
<msg timestamp="20200601 13:31:11.651" level="INFO">Executing : Row Count  |  SELECT orderNumber FROM orders </msg>
<msg timestamp="20200601 13:31:11.654" level="INFO">${CountOfAllSales} = 326</msg>
<status status="PASS" starttime="20200601 13:31:11.651" endtime="20200601 13:31:11.654"></status>
</kw>
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT City FROM offices</arg>
</arguments>
<assign>
<var>${CountOfOffices}</var>
</assign>
<msg timestamp="20200601 13:31:11.654" level="INFO">Executing : Row Count  |  SELECT City FROM offices </msg>
<msg timestamp="20200601 13:31:11.655" level="INFO">${CountOfOffices} = 7</msg>
<status status="PASS" starttime="20200601 13:31:11.654" endtime="20200601 13:31:11.655"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${CountOfAllSales}/${CountOfOffices}</arg>
</arguments>
<assign>
<var>${AverageSalesCount}</var>
</assign>
<msg timestamp="20200601 13:31:11.656" level="INFO">${AverageSalesCount} = 46.57142857142857</msg>
<status status="PASS" starttime="20200601 13:31:11.655" endtime="20200601 13:31:11.656"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>${AverageSalesCount}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${AverageSalesCount}</var>
</assign>
<msg timestamp="20200601 13:31:11.656" level="INFO">${AverageSalesCount} = 46.57142857</msg>
<status status="PASS" starttime="20200601 13:31:11.656" endtime="20200601 13:31:11.656"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${AverageSalesCount}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.656" level="INFO">${TestValue_Column_1} = 46.57142857</msg>
<status status="PASS" starttime="20200601 13:31:11.656" endtime="20200601 13:31:11.656"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.657" level="INFO">46.57142857</msg>
<status status="PASS" starttime="20200601 13:31:11.657" endtime="20200601 13:31:11.657"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.657" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.657" endtime="20200601 13:31:11.657"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.651" endtime="20200601 13:31:11.657"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.651" endtime="20200601 13:31:11.657"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_04">
<kw name="Verify Retrieved Data" library="TC_04_04_SQL">
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.658" endtime="20200601 13:31:11.658"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.659" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.658" endtime="20200601 13:31:11.659"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.658" endtime="20200601 13:31:11.659"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.657" endtime="20200601 13:31:11.659"></status>
</kw>
<kw name="Insert New Data" library="TC_04_04">
<kw name="Save Current Row Count" library="TC_04_04_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.660" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_04' </msg>
<msg timestamp="20200601 13:31:11.662" level="INFO">${current_row_count} = 43</msg>
<status status="PASS" starttime="20200601 13:31:11.660" endtime="20200601 13:31:11.662"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.662" level="INFO">${PREVIOUS_ROW_COUNT} = 43</msg>
<status status="PASS" starttime="20200601 13:31:11.662" endtime="20200601 13:31:11.662"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.663" level="INFO">43</msg>
<status status="PASS" starttime="20200601 13:31:11.663" endtime="20200601 13:31:11.663"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.659" endtime="20200601 13:31:11.663"></status>
</kw>
<kw name="Insert New Data" library="TC_04_04_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.663" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.664" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.663" endtime="20200601 13:31:11.664"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.664" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.664" endtime="20200601 13:31:11.664"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.665" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Avg_Count_All_Office_Sales) VALUES ('TC_04_04', '2020-06-01 13:31:11', 'PENDING', 46.57142857) </msg>
<status status="PASS" starttime="20200601 13:31:11.665" endtime="20200601 13:31:11.666"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.663" endtime="20200601 13:31:11.666"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_04_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.667" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_04' </msg>
<msg timestamp="20200601 13:31:11.669" level="INFO">${new_row_count} = 44</msg>
<status status="PASS" starttime="20200601 13:31:11.667" endtime="20200601 13:31:11.669"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.670" level="INFO">44</msg>
<status status="PASS" starttime="20200601 13:31:11.669" endtime="20200601 13:31:11.670"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.670" endtime="20200601 13:31:11.671"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.671" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.671" endtime="20200601 13:31:11.671"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.666" endtime="20200601 13:31:11.671"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.659" endtime="20200601 13:31:11.671"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_04">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_04_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_04_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.672" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Avg_Count_All_Office_Sales FROM TestScenario_04 WHERE TestCase = 'TC_04_04' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.673" level="INFO">${QueryResults} = (('TC_04_04', '2020-06-01 13:31:11', Decimal('46.57142857')),)</msg>
<status status="PASS" starttime="20200601 13:31:11.672" endtime="20200601 13:31:11.673"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.673" endtime="20200601 13:31:11.674"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][0]}</arg>
<arg>${TestCase}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.674" level="INFO">TC_04_04</msg>
<msg timestamp="20200601 13:31:11.674" level="INFO">TC_04_04</msg>
<status status="PASS" starttime="20200601 13:31:11.674" endtime="20200601 13:31:11.674"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.674" endtime="20200601 13:31:11.675"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][2]}</arg>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.675" level="INFO">46.57142857</msg>
<msg timestamp="20200601 13:31:11.675" level="INFO">46.57142857</msg>
<status status="PASS" starttime="20200601 13:31:11.675" endtime="20200601 13:31:11.675"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.676" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.675" endtime="20200601 13:31:11.676"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.675" endtime="20200601 13:31:11.676"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.672" endtime="20200601 13:31:11.676"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.672" endtime="20200601 13:31:11.676"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.671" endtime="20200601 13:31:11.676"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_04">
<kw name="Update Newly Inserted Data" library="TC_04_04_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.677" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.677" endtime="20200601 13:31:11.677"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.677" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_04' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.677" endtime="20200601 13:31:11.679"></status>
</kw>
<msg timestamp="20200601 13:31:11.679" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.677" endtime="20200601 13:31:11.679"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.676" endtime="20200601 13:31:11.679"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.676" endtime="20200601 13:31:11.679"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_04">
<kw name="Log All Rows" library="TC_04_04_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.680" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.680" endtime="20200601 13:31:11.680"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.681" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_04' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.682" level="INFO">${QueryResults} = (('TC_04_04', '2020-06-01 13:31:11', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-06-01 12:48:31', 'PASSED', None, None, None...</msg>
<status status="PASS" starttime="20200601 13:31:11.680" endtime="20200601 13:31:11.682"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.683" level="INFO">(('TC_04_04', '2020-06-01 13:31:11', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-06-01 12:48:31', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-06-01 12:47:53', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-06-01 12:38:54', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-06-01 12:38:09', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-06-01 12:31:45', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-06-01 11:48:06', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-31 17:10:40', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-31 17:07:44', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-31 17:04:04', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 13:25:18', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 13:20:55', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 13:04:19', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:35:40', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:34:21', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:33:17', 'PASSED', None, None, None, Decimal('46.57142857'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:32:32', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:29:50', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:26:24', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:25:52', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:25:23', 'PENDING', None, None, None, Decimal('47.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-30 12:21:04', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 12:17:29', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 12:16:20', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 12:14:54', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 12:13:58', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 12:13:19', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 12:08:02', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 12:05:35', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 11:28:03', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 11:24:35', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 11:23:33', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 11:08:50', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:24:27', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:24:17', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:23:51', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:22:44', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:16:08', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:09:28', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:07:49', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:05:04', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:03:06', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 10:01:27', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None), ('TC_04_04', '2020-05-29 09:59:16', 'FAILED', None, None, None, Decimal('46.00000000'), None, None, None, None, None, None, None, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.683" endtime="20200601 13:31:11.683"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.680" endtime="20200601 13:31:11.683"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.679" endtime="20200601 13:31:11.683"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.684" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.684" endtime="20200601 13:31:11.684"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.683" endtime="20200601 13:31:11.684"></status>
</kw>
<tags>
<tag>TestCase_04_04: Average count of sales all offices</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.646" endtime="20200601 13:31:11.684" critical="yes"></status>
</test>
<test id="s1-t5" name="TC_04_05: Count of sales where office is NULL">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.686" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.686" endtime="20200601 13:31:11.688"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.685" endtime="20200601 13:31:11.688"></status>
</kw>
<kw name="Set Variables" library="TC_04_05">
<kw name="Set Variables" library="TC_04_05_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_05</arg>
</arguments>
<msg timestamp="20200601 13:31:11.689" level="INFO">${TestCase} = TC_04_05</msg>
<status status="PASS" starttime="20200601 13:31:11.689" endtime="20200601 13:31:11.689"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Count_Sales_Where_Office_NULL</arg>
</arguments>
<msg timestamp="20200601 13:31:11.689" level="INFO">${Test_Column_1} = Count_Sales_Where_Office_NULL</msg>
<status status="PASS" starttime="20200601 13:31:11.689" endtime="20200601 13:31:11.689"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.690" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.690" endtime="20200601 13:31:11.690"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.689" endtime="20200601 13:31:11.690"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.688" endtime="20200601 13:31:11.690"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_05">
<kw name="Count of sales where office is NULL" library="TC_04_05_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT orderNumber FROM payments JOIN orders ON payments.customerNumber=orders.customerNumber JOIN customers ON payments.customerNumber=customers.customerNumber JOIN employees ON customers.salesRepEmployeeNumber=employees.employeeNumber JOIN offices ON employees.officeCode=offices.officeCode WHERE ISNULL(offices.city)</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.691" level="INFO">Executing : Row Count  |  SELECT orderNumber FROM payments JOIN orders ON payments.customerNumber=orders.customerNumber JOIN customers ON payments.customerNumber=customers.customerNumber JOIN employees ON customers.salesRepEmployeeNumber=employees.employeeNumber JOIN offices ON employees.officeCode=offices.officeCode WHERE ISNULL(offices.city) </msg>
<msg timestamp="20200601 13:31:11.692" level="INFO">${QueryResults} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.691" endtime="20200601 13:31:11.692"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.692" level="INFO">${TestValue_Column_1} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.692" endtime="20200601 13:31:11.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.693" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.692" endtime="20200601 13:31:11.693"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.693" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.693" endtime="20200601 13:31:11.693"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.690" endtime="20200601 13:31:11.693"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.690" endtime="20200601 13:31:11.693"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_05">
<kw name="Verify Retrieved Data" library="TC_04_05_SQL">
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.694" endtime="20200601 13:31:11.694"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.694" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.694" endtime="20200601 13:31:11.694"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.694" endtime="20200601 13:31:11.694"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.693" endtime="20200601 13:31:11.694"></status>
</kw>
<kw name="Insert New Data" library="TC_04_05">
<kw name="Save Current Row Count" library="TC_04_05_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.695" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_05' </msg>
<msg timestamp="20200601 13:31:11.697" level="INFO">${current_row_count} = 34</msg>
<status status="PASS" starttime="20200601 13:31:11.695" endtime="20200601 13:31:11.697"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.698" level="INFO">${PREVIOUS_ROW_COUNT} = 34</msg>
<status status="PASS" starttime="20200601 13:31:11.697" endtime="20200601 13:31:11.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.698" level="INFO">34</msg>
<status status="PASS" starttime="20200601 13:31:11.698" endtime="20200601 13:31:11.698"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.695" endtime="20200601 13:31:11.698"></status>
</kw>
<kw name="Insert New Data" library="TC_04_05_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.699" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.699" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.698" endtime="20200601 13:31:11.699"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.699" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.699" endtime="20200601 13:31:11.700"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.700" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Count_Sales_Where_Office_NULL) VALUES ('TC_04_05', '2020-06-01 13:31:11', 'PENDING', 0) </msg>
<status status="PASS" starttime="20200601 13:31:11.700" endtime="20200601 13:31:11.701"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.698" endtime="20200601 13:31:11.701"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_05_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.702" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_05' </msg>
<msg timestamp="20200601 13:31:11.703" level="INFO">${new_row_count} = 35</msg>
<status status="PASS" starttime="20200601 13:31:11.702" endtime="20200601 13:31:11.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.704" level="INFO">35</msg>
<status status="PASS" starttime="20200601 13:31:11.704" endtime="20200601 13:31:11.704"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.704" endtime="20200601 13:31:11.704"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.705" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.704" endtime="20200601 13:31:11.705"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.701" endtime="20200601 13:31:11.705"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.695" endtime="20200601 13:31:11.705"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_05">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_05_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_05_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.706" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Count_Sales_Where_Office_NULL FROM TestScenario_04 WHERE TestCase = 'TC_04_05' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.707" level="INFO">${QueryResults} = (('TC_04_05', '2020-06-01 13:31:11', 0),)</msg>
<status status="PASS" starttime="20200601 13:31:11.706" endtime="20200601 13:31:11.707"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.707" endtime="20200601 13:31:11.707"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][0]}</arg>
<arg>${TestCase}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.708" level="INFO">TC_04_05</msg>
<msg timestamp="20200601 13:31:11.708" level="INFO">TC_04_05</msg>
<status status="PASS" starttime="20200601 13:31:11.707" endtime="20200601 13:31:11.708"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.708" endtime="20200601 13:31:11.708"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][2]}</arg>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.709" level="INFO">0</msg>
<msg timestamp="20200601 13:31:11.709" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.708" endtime="20200601 13:31:11.709"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.710" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.709" endtime="20200601 13:31:11.710"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.709" endtime="20200601 13:31:11.710"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.705" endtime="20200601 13:31:11.710"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.705" endtime="20200601 13:31:11.710"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.705" endtime="20200601 13:31:11.710"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_05">
<kw name="Update Newly Inserted Data" library="TC_04_05_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.711" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.711" endtime="20200601 13:31:11.711"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.712" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_05' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.712" endtime="20200601 13:31:11.713"></status>
</kw>
<msg timestamp="20200601 13:31:11.713" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.711" endtime="20200601 13:31:11.713"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.711" endtime="20200601 13:31:11.714"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.710" endtime="20200601 13:31:11.714"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_05">
<kw name="Log All Rows" library="TC_04_05_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.715" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.715" endtime="20200601 13:31:11.715"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.715" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_05' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.717" level="INFO">${QueryResults} = (('TC_04_05', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, 0, None, None...</msg>
<status status="PASS" starttime="20200601 13:31:11.715" endtime="20200601 13:31:11.717"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.717" level="INFO">(('TC_04_05', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-06-01 12:47:54', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-06-01 12:38:54', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-06-01 12:38:09', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-06-01 12:31:45', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-06-01 11:48:06', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-31 17:10:40', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-31 17:07:44', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-31 17:04:04', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-30 13:25:18', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-30 13:20:55', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-30 13:04:19', 'PASSED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 12:17:29', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 12:16:20', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 12:14:54', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 12:13:58', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 12:13:19', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 12:08:02', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 12:05:35', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 11:28:03', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 11:24:35', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 11:23:33', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 11:08:50', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:24:27', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:24:17', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:23:51', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:22:44', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:16:09', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:09:28', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:07:49', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:05:04', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:03:06', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 10:01:27', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None), ('TC_04_05', '2020-05-29 09:59:16', 'FAILED', None, None, None, None, 0, None, None, None, None, None, None, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.717" endtime="20200601 13:31:11.718"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.714" endtime="20200601 13:31:11.718"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.714" endtime="20200601 13:31:11.718"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.718" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.718" endtime="20200601 13:31:11.718"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.718" endtime="20200601 13:31:11.719"></status>
</kw>
<tags>
<tag>TestCase_04_05: Count of sales where office is NULL</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.684" endtime="20200601 13:31:11.719" critical="yes"></status>
</test>
<test id="s1-t6" name="TC_04_06: Count of offices with no sales">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.720" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.719" endtime="20200601 13:31:11.722"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.719" endtime="20200601 13:31:11.722"></status>
</kw>
<kw name="Set Variables" library="TC_04_06">
<kw name="Set Variables" library="TC_04_06_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_06</arg>
</arguments>
<msg timestamp="20200601 13:31:11.723" level="INFO">${TestCase} = TC_04_06</msg>
<status status="PASS" starttime="20200601 13:31:11.723" endtime="20200601 13:31:11.723"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Offices_With_No_Sales</arg>
</arguments>
<msg timestamp="20200601 13:31:11.724" level="INFO">${Test_Column_1} = Offices_With_No_Sales</msg>
<status status="PASS" starttime="20200601 13:31:11.724" endtime="20200601 13:31:11.724"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.724" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.724" endtime="20200601 13:31:11.724"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.723" endtime="20200601 13:31:11.724"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.723" endtime="20200601 13:31:11.724"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_06">
<kw name="Count of offices with no sales" library="TC_04_06_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT Office FROM (SELECT sum(amount), offices.city as Office FROM payments JOIN customers ON payments.customerNumber=customers.customerNumber JOIN employees ON customers.salesRepEmployeeNumber=employees.employeeNumber JOIN offices ON employees.officeCode=offices.officeCode GROUP BY offices.city HAVING sum(amount)&lt;=0) AS ZeroSales</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.725" level="INFO">Executing : Row Count  |  SELECT Office FROM (SELECT sum(amount), offices.city as Office FROM payments JOIN customers ON payments.customerNumber=customers.customerNumber JOIN employees ON customers.salesRepEmployeeNumber=employees.employeeNumber JOIN offices ON employees.officeCode=offices.officeCode GROUP BY offices.city HAVING sum(amount)&lt;=0) AS ZeroSales </msg>
<msg timestamp="20200601 13:31:11.728" level="INFO">${QueryResults} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.725" endtime="20200601 13:31:11.728"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.728" level="INFO">${TestValue_Column_1} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.728" endtime="20200601 13:31:11.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.728" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.728" endtime="20200601 13:31:11.729"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.729" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.729" endtime="20200601 13:31:11.729"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.725" endtime="20200601 13:31:11.729"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.724" endtime="20200601 13:31:11.729"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_06">
<kw name="Verify Retrieved Data" library="TC_04_06_SQL">
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.730" endtime="20200601 13:31:11.730"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.730" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.730" endtime="20200601 13:31:11.730"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.729" endtime="20200601 13:31:11.730"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.729" endtime="20200601 13:31:11.730"></status>
</kw>
<kw name="Insert New Data" library="TC_04_06">
<kw name="Save Current Row Count" library="TC_04_06_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.732" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_06' </msg>
<msg timestamp="20200601 13:31:11.733" level="INFO">${current_row_count} = 33</msg>
<status status="PASS" starttime="20200601 13:31:11.731" endtime="20200601 13:31:11.733"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.734" level="INFO">${PREVIOUS_ROW_COUNT} = 33</msg>
<status status="PASS" starttime="20200601 13:31:11.734" endtime="20200601 13:31:11.734"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.734" level="INFO">33</msg>
<status status="PASS" starttime="20200601 13:31:11.734" endtime="20200601 13:31:11.734"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.731" endtime="20200601 13:31:11.734"></status>
</kw>
<kw name="Insert New Data" library="TC_04_06_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.735" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.736" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.735" endtime="20200601 13:31:11.736"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.736" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.736" endtime="20200601 13:31:11.737"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.737" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Offices_With_No_Sales) VALUES ('TC_04_06', '2020-06-01 13:31:11', 'PENDING', 0) </msg>
<status status="PASS" starttime="20200601 13:31:11.737" endtime="20200601 13:31:11.738"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.735" endtime="20200601 13:31:11.738"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_06_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.739" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_06' </msg>
<msg timestamp="20200601 13:31:11.741" level="INFO">${new_row_count} = 34</msg>
<status status="PASS" starttime="20200601 13:31:11.739" endtime="20200601 13:31:11.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.742" level="INFO">34</msg>
<status status="PASS" starttime="20200601 13:31:11.741" endtime="20200601 13:31:11.742"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.742" endtime="20200601 13:31:11.742"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.742" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.742" endtime="20200601 13:31:11.743"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.738" endtime="20200601 13:31:11.743"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.731" endtime="20200601 13:31:11.743"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_06">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_06_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_06_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.744" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Offices_With_No_Sales FROM TestScenario_04 WHERE TestCase = 'TC_04_06' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.745" level="INFO">${QueryResults} = (('TC_04_06', '2020-06-01 13:31:11', '0'),)</msg>
<status status="PASS" starttime="20200601 13:31:11.744" endtime="20200601 13:31:11.745"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.745" endtime="20200601 13:31:11.745"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][0]}</arg>
<arg>${TestCase}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.745" level="INFO">TC_04_06</msg>
<msg timestamp="20200601 13:31:11.746" level="INFO">TC_04_06</msg>
<status status="PASS" starttime="20200601 13:31:11.745" endtime="20200601 13:31:11.746"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.746" endtime="20200601 13:31:11.746"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][2]}</arg>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.746" level="INFO">0</msg>
<msg timestamp="20200601 13:31:11.746" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.746" endtime="20200601 13:31:11.746"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.747" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.747" endtime="20200601 13:31:11.747"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.747" endtime="20200601 13:31:11.747"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.743" endtime="20200601 13:31:11.747"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.743" endtime="20200601 13:31:11.747"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.743" endtime="20200601 13:31:11.747"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_06">
<kw name="Update Newly Inserted Data" library="TC_04_06_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.748" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.748" endtime="20200601 13:31:11.748"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.749" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_06' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.749" endtime="20200601 13:31:11.751"></status>
</kw>
<msg timestamp="20200601 13:31:11.751" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.748" endtime="20200601 13:31:11.751"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.748" endtime="20200601 13:31:11.751"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.747" endtime="20200601 13:31:11.751"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_06">
<kw name="Log All Rows" library="TC_04_06_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.752" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.752" endtime="20200601 13:31:11.752"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.752" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_06' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.754" level="INFO">${QueryResults} = (('TC_04_06', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, '0', ...</msg>
<status status="PASS" starttime="20200601 13:31:11.752" endtime="20200601 13:31:11.754"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.755" level="INFO">(('TC_04_06', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-06-01 12:47:54', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-06-01 12:38:54', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-06-01 12:38:09', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-06-01 12:31:45', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-06-01 11:48:06', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-31 17:10:40', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-31 17:07:44', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-31 17:04:04', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-30 13:25:18', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-30 13:20:55', 'PASSED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 12:17:29', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 12:16:20', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 12:14:54', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 12:13:58', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 12:13:19', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 12:08:02', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 12:05:35', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 11:28:03', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 11:24:35', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 11:23:33', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 11:08:50', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:24:27', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:24:17', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:23:51', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:22:44', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:16:09', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:09:28', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:07:49', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:05:04', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:03:06', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 10:01:27', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None), ('TC_04_06', '2020-05-29 09:59:16', 'FAILED', None, None, None, None, None, '0', None, None, None, None, None, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.755" endtime="20200601 13:31:11.755"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.751" endtime="20200601 13:31:11.755"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.751" endtime="20200601 13:31:11.755"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.756" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.756" endtime="20200601 13:31:11.756"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.755" endtime="20200601 13:31:11.756"></status>
</kw>
<tags>
<tag>TestCase_04_06: Count of offices with no sales</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.719" endtime="20200601 13:31:11.756" critical="yes"></status>
</test>
<test id="s1-t7" name="TC_04_07: Top_3 offices ranked by sales">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.757" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.757" endtime="20200601 13:31:11.758"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.756" endtime="20200601 13:31:11.758"></status>
</kw>
<kw name="Set Variables" library="TC_04_07">
<kw name="Set Variables" library="TC_04_07_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_07</arg>
</arguments>
<msg timestamp="20200601 13:31:11.760" level="INFO">${TestCase} = TC_04_07</msg>
<status status="PASS" starttime="20200601 13:31:11.759" endtime="20200601 13:31:11.760"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>Top_3_Office_Rank</arg>
<arg>Top_3_Offices</arg>
<arg>Top_3_Office_Sale_Sum</arg>
</arguments>
<assign>
<var>@{TestColumnNames}</var>
</assign>
<msg timestamp="20200601 13:31:11.760" level="INFO">@{TestColumnNames} = [ Top_3_Office_Rank | Top_3_Offices | Top_3_Office_Sale_Sum ]</msg>
<status status="PASS" starttime="20200601 13:31:11.760" endtime="20200601 13:31:11.760"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${TestColumnNames}</arg>
</arguments>
<assign>
<var>${ColumnCount}</var>
</assign>
<msg timestamp="20200601 13:31:11.760" level="INFO">Length is 3</msg>
<msg timestamp="20200601 13:31:11.760" level="INFO">${ColumnCount} = 3</msg>
<status status="PASS" starttime="20200601 13:31:11.760" endtime="20200601 13:31:11.760"></status>
</kw>
<kw name="${TestColumnNames} IN RANGE [ 0 | ${ColumnCount} ]" type="for">
<kw name="${TestColumnNames} = 0" type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${1 + 1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.761" level="INFO">${1 + 1} = 2</msg>
<status status="PASS" starttime="20200601 13:31:11.761" endtime="20200601 13:31:11.761"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestColumnName} =</arg>
<arg>catenate</arg>
<arg>SEPARATOR=_</arg>
<arg>"Test_Column"</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20200601 13:31:11.762" level="FAIL">Invalid variable syntax '${TestColumnName} ='.</msg>
<status status="FAIL" starttime="20200601 13:31:11.761" endtime="20200601 13:31:11.762"></status>
</kw>
<status status="FAIL" starttime="20200601 13:31:11.761" endtime="20200601 13:31:11.762"></status>
</kw>
<status status="FAIL" starttime="20200601 13:31:11.760" endtime="20200601 13:31:11.762"></status>
</kw>
<status status="FAIL" starttime="20200601 13:31:11.759" endtime="20200601 13:31:11.762"></status>
</kw>
<status status="FAIL" starttime="20200601 13:31:11.759" endtime="20200601 13:31:11.762"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.763" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.763" endtime="20200601 13:31:11.763"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.762" endtime="20200601 13:31:11.763"></status>
</kw>
<tags>
<tag>TestCase_04_07: Top 3 offices ranked by sales</tag>
</tags>
<status status="FAIL" starttime="20200601 13:31:11.756" endtime="20200601 13:31:11.763" critical="yes">Invalid variable syntax '${TestColumnName} ='.</status>
</test>
<test id="s1-t8" name="TC_04_08: Check there are no duplicate order-numbers">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.764" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.764" endtime="20200601 13:31:11.766"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.764" endtime="20200601 13:31:11.766"></status>
</kw>
<kw name="Set Variables" library="TC_04_08">
<kw name="Set Variables" library="TC_04_08_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_08</arg>
</arguments>
<msg timestamp="20200601 13:31:11.767" level="INFO">${TestCase} = TC_04_08</msg>
<status status="PASS" starttime="20200601 13:31:11.767" endtime="20200601 13:31:11.767"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Count_Duplicate_OrderNumbers</arg>
</arguments>
<msg timestamp="20200601 13:31:11.767" level="INFO">${Test_Column_1} = Count_Duplicate_OrderNumbers</msg>
<status status="PASS" starttime="20200601 13:31:11.767" endtime="20200601 13:31:11.767"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.768" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.768" endtime="20200601 13:31:11.768"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.767" endtime="20200601 13:31:11.768"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.766" endtime="20200601 13:31:11.768"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_08">
<kw name="Check there are no duplicate order numbers" library="TC_04_08_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT orderNumber FROM orders GROUP BY orderNumber HAVING count(orderNumber) &gt; 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.769" level="INFO">Executing : Row Count  |  SELECT orderNumber FROM orders GROUP BY orderNumber HAVING count(orderNumber) &gt; 1 </msg>
<msg timestamp="20200601 13:31:11.769" level="INFO">${QueryResults} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.769" endtime="20200601 13:31:11.769"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.770" level="INFO">${TestValue_Column_1} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.770" endtime="20200601 13:31:11.770"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.770" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.770" endtime="20200601 13:31:11.770"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.771" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.770" endtime="20200601 13:31:11.771"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.768" endtime="20200601 13:31:11.771"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.768" endtime="20200601 13:31:11.771"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_08">
<kw name="Verify Retrieved Data" library="TC_04_08_SQL">
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.771" endtime="20200601 13:31:11.772"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.772" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.772" endtime="20200601 13:31:11.772"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.771" endtime="20200601 13:31:11.772"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.771" endtime="20200601 13:31:11.772"></status>
</kw>
<kw name="Insert New Data" library="TC_04_08">
<kw name="Save Current Row Count" library="TC_04_08_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.773" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_08' </msg>
<msg timestamp="20200601 13:31:11.775" level="INFO">${current_row_count} = 31</msg>
<status status="PASS" starttime="20200601 13:31:11.773" endtime="20200601 13:31:11.775"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.775" level="INFO">${PREVIOUS_ROW_COUNT} = 31</msg>
<status status="PASS" starttime="20200601 13:31:11.775" endtime="20200601 13:31:11.775"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.776" level="INFO">31</msg>
<status status="PASS" starttime="20200601 13:31:11.776" endtime="20200601 13:31:11.776"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.773" endtime="20200601 13:31:11.776"></status>
</kw>
<kw name="Insert New Data" library="TC_04_08_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.776" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.777" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.776" endtime="20200601 13:31:11.777"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.777" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.777" endtime="20200601 13:31:11.777"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.778" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Count_Duplicate_OrderNumbers) VALUES ('TC_04_08', '2020-06-01 13:31:11', 'PENDING', 0) </msg>
<status status="PASS" starttime="20200601 13:31:11.777" endtime="20200601 13:31:11.778"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.776" endtime="20200601 13:31:11.779"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_08_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.779" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_08' </msg>
<msg timestamp="20200601 13:31:11.781" level="INFO">${new_row_count} = 32</msg>
<status status="PASS" starttime="20200601 13:31:11.779" endtime="20200601 13:31:11.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.781" level="INFO">32</msg>
<status status="PASS" starttime="20200601 13:31:11.781" endtime="20200601 13:31:11.781"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.781" endtime="20200601 13:31:11.782"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.782" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.782" endtime="20200601 13:31:11.782"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.779" endtime="20200601 13:31:11.782"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.772" endtime="20200601 13:31:11.782"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_08">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_08_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_08_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.784" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Count_Duplicate_OrderNumbers FROM TestScenario_04 WHERE TestCase = 'TC_04_08' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.785" level="INFO">${QueryResults} = (('TC_04_08', '2020-06-01 13:31:11', 0),)</msg>
<status status="PASS" starttime="20200601 13:31:11.783" endtime="20200601 13:31:11.785"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.785" endtime="20200601 13:31:11.785"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][0]}</arg>
<arg>${TestCase}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.785" level="INFO">TC_04_08</msg>
<msg timestamp="20200601 13:31:11.785" level="INFO">TC_04_08</msg>
<status status="PASS" starttime="20200601 13:31:11.785" endtime="20200601 13:31:11.786"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.786" endtime="20200601 13:31:11.786"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][2]}</arg>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.786" level="INFO">0</msg>
<msg timestamp="20200601 13:31:11.786" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.786" endtime="20200601 13:31:11.786"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.787" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.787" endtime="20200601 13:31:11.787"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.786" endtime="20200601 13:31:11.787"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.783" endtime="20200601 13:31:11.787"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.783" endtime="20200601 13:31:11.787"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.783" endtime="20200601 13:31:11.787"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_08">
<kw name="Update Newly Inserted Data" library="TC_04_08_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.788" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.788" endtime="20200601 13:31:11.788"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.789" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_08' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.789" endtime="20200601 13:31:11.791"></status>
</kw>
<msg timestamp="20200601 13:31:11.791" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.788" endtime="20200601 13:31:11.791"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.788" endtime="20200601 13:31:11.791"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.787" endtime="20200601 13:31:11.791"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_08">
<kw name="Log All Rows" library="TC_04_08_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.792" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.792" endtime="20200601 13:31:11.792"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.792" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_08' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.794" level="INFO">${QueryResults} = (('TC_04_08', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, None, N...</msg>
<status status="PASS" starttime="20200601 13:31:11.792" endtime="20200601 13:31:11.794"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.794" level="INFO">(('TC_04_08', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-06-01 12:47:54', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-06-01 12:38:54', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-06-01 12:38:09', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-06-01 12:31:45', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-06-01 11:48:06', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-31 17:10:41', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-31 17:07:44', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-31 17:04:04', 'PASSED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 12:17:29', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 12:16:20', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 12:14:54', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 12:13:58', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 12:13:19', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 12:08:02', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 12:05:35', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 11:28:03', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 11:24:35', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 11:23:33', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 11:08:50', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:24:27', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:24:17', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:23:51', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:22:44', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:16:09', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:09:28', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:07:49', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:05:04', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:03:06', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 10:01:27', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None), ('TC_04_08', '2020-05-29 09:59:16', 'FAILED', None, None, None, None, None, None, None, None, None, 0, None, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.794" endtime="20200601 13:31:11.795"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.792" endtime="20200601 13:31:11.795"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.791" endtime="20200601 13:31:11.795"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.795" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.795" endtime="20200601 13:31:11.796"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.795" endtime="20200601 13:31:11.796"></status>
</kw>
<tags>
<tag>TestCase_04_08: Check there are no duplicate order-numbers</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.763" endtime="20200601 13:31:11.796" critical="yes"></status>
</test>
<test id="s1-t9" name="TC_04_09: Check there are no NULL order-numbers">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.797" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.797" endtime="20200601 13:31:11.799"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.796" endtime="20200601 13:31:11.799"></status>
</kw>
<kw name="Set Variables" library="TC_04_09">
<kw name="Set Variables" library="TC_04_09_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_09</arg>
</arguments>
<msg timestamp="20200601 13:31:11.800" level="INFO">${TestCase} = TC_04_09</msg>
<status status="PASS" starttime="20200601 13:31:11.800" endtime="20200601 13:31:11.800"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Count_NULL_OrderNumbers</arg>
</arguments>
<msg timestamp="20200601 13:31:11.800" level="INFO">${Test_Column_1} = Count_NULL_OrderNumbers</msg>
<status status="PASS" starttime="20200601 13:31:11.800" endtime="20200601 13:31:11.800"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.801" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.800" endtime="20200601 13:31:11.801"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.799" endtime="20200601 13:31:11.801"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.799" endtime="20200601 13:31:11.801"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_09">
<kw name="Check there are no NULL order numbers" library="TC_04_09_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT orderNumber FROM orders WHERE orderNumber IS NULL</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.802" level="INFO">Executing : Row Count  |  SELECT orderNumber FROM orders WHERE orderNumber IS NULL </msg>
<msg timestamp="20200601 13:31:11.802" level="INFO">${QueryResults} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.801" endtime="20200601 13:31:11.802"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.803" level="INFO">${TestValue_Column_1} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.802" endtime="20200601 13:31:11.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.803" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.803" endtime="20200601 13:31:11.803"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.803" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.803" endtime="20200601 13:31:11.804"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.801" endtime="20200601 13:31:11.804"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.801" endtime="20200601 13:31:11.804"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_09">
<kw name="Verify Retrieved Data" library="TC_04_09_SQL">
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.804" endtime="20200601 13:31:11.805"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.805" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.805" endtime="20200601 13:31:11.805"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.804" endtime="20200601 13:31:11.805"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.804" endtime="20200601 13:31:11.805"></status>
</kw>
<kw name="Insert New Data" library="TC_04_09">
<kw name="Save Current Row Count" library="TC_04_09_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.806" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_09' </msg>
<msg timestamp="20200601 13:31:11.808" level="INFO">${current_row_count} = 30</msg>
<status status="PASS" starttime="20200601 13:31:11.806" endtime="20200601 13:31:11.808"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.808" level="INFO">${PREVIOUS_ROW_COUNT} = 30</msg>
<status status="PASS" starttime="20200601 13:31:11.808" endtime="20200601 13:31:11.808"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.808" level="INFO">30</msg>
<status status="PASS" starttime="20200601 13:31:11.808" endtime="20200601 13:31:11.809"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.806" endtime="20200601 13:31:11.809"></status>
</kw>
<kw name="Insert New Data" library="TC_04_09_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.809" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.810" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.809" endtime="20200601 13:31:11.810"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.810" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.810" endtime="20200601 13:31:11.810"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.811" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Count_NULL_OrderNumbers) VALUES ('TC_04_09', '2020-06-01 13:31:11', 'PENDING', 0) </msg>
<status status="PASS" starttime="20200601 13:31:11.810" endtime="20200601 13:31:11.811"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.809" endtime="20200601 13:31:11.812"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_09_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.812" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_09' </msg>
<msg timestamp="20200601 13:31:11.814" level="INFO">${new_row_count} = 31</msg>
<status status="PASS" starttime="20200601 13:31:11.812" endtime="20200601 13:31:11.814"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.814" level="INFO">31</msg>
<status status="PASS" starttime="20200601 13:31:11.814" endtime="20200601 13:31:11.814"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.814" endtime="20200601 13:31:11.815"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.815" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.815" endtime="20200601 13:31:11.815"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.812" endtime="20200601 13:31:11.815"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.805" endtime="20200601 13:31:11.815"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_09">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_09_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_09_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.816" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Count_NULL_OrderNumbers FROM TestScenario_04 WHERE TestCase = 'TC_04_09' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.817" level="INFO">${QueryResults} = (('TC_04_09', '2020-06-01 13:31:11', 0),)</msg>
<status status="PASS" starttime="20200601 13:31:11.816" endtime="20200601 13:31:11.817"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.817" endtime="20200601 13:31:11.818"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][0]}</arg>
<arg>${TestCase}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.818" level="INFO">TC_04_09</msg>
<msg timestamp="20200601 13:31:11.818" level="INFO">TC_04_09</msg>
<status status="PASS" starttime="20200601 13:31:11.818" endtime="20200601 13:31:11.818"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.818" endtime="20200601 13:31:11.818"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][2]}</arg>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.819" level="INFO">0</msg>
<msg timestamp="20200601 13:31:11.819" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.819" endtime="20200601 13:31:11.819"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.820" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.819" endtime="20200601 13:31:11.820"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.819" endtime="20200601 13:31:11.820"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.816" endtime="20200601 13:31:11.820"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.816" endtime="20200601 13:31:11.820"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.815" endtime="20200601 13:31:11.820"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_09">
<kw name="Update Newly Inserted Data" library="TC_04_09_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.821" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.821" endtime="20200601 13:31:11.821"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.822" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_09' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.822" endtime="20200601 13:31:11.824"></status>
</kw>
<msg timestamp="20200601 13:31:11.824" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.821" endtime="20200601 13:31:11.824"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.821" endtime="20200601 13:31:11.824"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.820" endtime="20200601 13:31:11.824"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_09">
<kw name="Log All Rows" library="TC_04_09_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.825" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.825" endtime="20200601 13:31:11.825"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.826" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_09' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.827" level="INFO">${QueryResults} = (('TC_04_09', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, None, N...</msg>
<status status="PASS" starttime="20200601 13:31:11.825" endtime="20200601 13:31:11.827"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.828" level="INFO">(('TC_04_09', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-06-01 12:47:54', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-06-01 12:38:54', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-06-01 12:38:09', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-06-01 12:31:45', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-06-01 11:48:06', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-31 17:10:41', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-31 17:07:44', 'PASSED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 12:17:29', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 12:16:20', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 12:14:54', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 12:13:58', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 12:13:19', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 12:08:02', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 12:05:35', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 11:28:03', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 11:24:35', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 11:23:33', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 11:08:50', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:24:28', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:24:17', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:23:51', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:22:44', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:16:09', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:09:28', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:07:49', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:05:04', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:03:06', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 10:01:27', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None), ('TC_04_09', '2020-05-29 09:59:16', 'FAILED', None, None, None, None, None, None, None, None, None, None, 0, None))</msg>
<status status="PASS" starttime="20200601 13:31:11.827" endtime="20200601 13:31:11.828"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.825" endtime="20200601 13:31:11.828"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.824" endtime="20200601 13:31:11.828"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.829" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.828" endtime="20200601 13:31:11.829"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.828" endtime="20200601 13:31:11.829"></status>
</kw>
<tags>
<tag>TestCase_04_09: Check there are no NULL order-numbers</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.796" endtime="20200601 13:31:11.829" critical="yes"></status>
</test>
<test id="s1-t10" name="TC_04_10: Check alphabetical value only in office field">
<kw name="Connect" library="DB_Connection" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.830" level="INFO">Connecting using : pymysql.connect(db=classicmodels, user=root, passwd=Christian54, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200601 13:31:11.830" endtime="20200601 13:31:11.832"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.830" endtime="20200601 13:31:11.832"></status>
</kw>
<kw name="Set Variables" library="TC_04_10">
<kw name="Set Variables" library="TC_04_10_SQL">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestCase}</arg>
<arg>TC_04_10</arg>
</arguments>
<msg timestamp="20200601 13:31:11.833" level="INFO">${TestCase} = TC_04_10</msg>
<status status="PASS" starttime="20200601 13:31:11.833" endtime="20200601 13:31:11.833"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Test_Column_1}</arg>
<arg>Count_Incorrect_OfficeName</arg>
</arguments>
<msg timestamp="20200601 13:31:11.833" level="INFO">${Test_Column_1} = Count_Incorrect_OfficeName</msg>
<status status="PASS" starttime="20200601 13:31:11.833" endtime="20200601 13:31:11.833"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>Pending</arg>
</arguments>
<msg timestamp="20200601 13:31:11.833" level="INFO">${TestStatus} = Pending</msg>
<status status="PASS" starttime="20200601 13:31:11.833" endtime="20200601 13:31:11.833"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.832" endtime="20200601 13:31:11.834"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.832" endtime="20200601 13:31:11.834"></status>
</kw>
<kw name="Retrieve Data" library="TC_04_10">
<kw name="Check alphabetical value only in office field" library="TC_04_10_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT city FROM offices WHERE city NOT IN('San Francisco','Boston','NYC','Paris','Tokyo','Japan','Sydney','London')</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.834" level="INFO">Executing : Row Count  |  SELECT city FROM offices WHERE city NOT IN('San Francisco','Boston','NYC','Paris','Tokyo','Japan','Sydney','London') </msg>
<msg timestamp="20200601 13:31:11.835" level="INFO">${QueryResults} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.834" endtime="20200601 13:31:11.835"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.836" level="INFO">${TestValue_Column_1} = 0</msg>
<status status="PASS" starttime="20200601 13:31:11.835" endtime="20200601 13:31:11.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.836" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.836" endtime="20200601 13:31:11.836"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Data retrieved'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.836" level="INFO">${TestStatus} = 'Data retrieved'</msg>
<status status="PASS" starttime="20200601 13:31:11.836" endtime="20200601 13:31:11.836"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.834" endtime="20200601 13:31:11.836"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.834" endtime="20200601 13:31:11.837"></status>
</kw>
<kw name="Verify Retrieved Data" library="TC_04_10">
<kw name="Verify Retrieved Data" library="TC_04_10_SQL">
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${TestValue_Column_1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.838" endtime="20200601 13:31:11.838"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Retrieved Data Verified'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.838" level="INFO">${TestStatus} = 'Retrieved Data Verified'</msg>
<status status="PASS" starttime="20200601 13:31:11.838" endtime="20200601 13:31:11.838"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.837" endtime="20200601 13:31:11.838"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.837" endtime="20200601 13:31:11.838"></status>
</kw>
<kw name="Insert New Data" library="TC_04_10">
<kw name="Save Current Row Count" library="TC_04_10_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${current_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.839" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_10' </msg>
<msg timestamp="20200601 13:31:11.841" level="INFO">${current_row_count} = 29</msg>
<status status="PASS" starttime="20200601 13:31:11.839" endtime="20200601 13:31:11.841"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
<arg>${current_row_count}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.841" level="INFO">${PREVIOUS_ROW_COUNT} = 29</msg>
<status status="PASS" starttime="20200601 13:31:11.841" endtime="20200601 13:31:11.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${PREVIOUS_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.842" level="INFO">29</msg>
<status status="PASS" starttime="20200601 13:31:11.841" endtime="20200601 13:31:11.842"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.839" endtime="20200601 13:31:11.842"></status>
</kw>
<kw name="Insert New Data" library="TC_04_10_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT cast(current_timestamp() as char)</arg>
</arguments>
<assign>
<var>${Get_DateStamp}</var>
</assign>
<msg timestamp="20200601 13:31:11.842" level="INFO">Executing : Query  |  SELECT cast(current_timestamp() as char) </msg>
<msg timestamp="20200601 13:31:11.843" level="INFO">${Get_DateStamp} = (('2020-06-01 13:31:11',),)</msg>
<status status="PASS" starttime="20200601 13:31:11.842" endtime="20200601 13:31:11.843"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Insert_DateStamp}</arg>
<arg>${Get_DateStamp[0][0]}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.843" level="INFO">${Insert_DateStamp} = 2020-06-01 13:31:11</msg>
<status status="PASS" starttime="20200601 13:31:11.843" endtime="20200601 13:31:11.843"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, ${Test_Column_1}) VALUES ('${TestCase}', '${Insert_DateStamp}', 'PENDING', ${TestValue_Column_1})</arg>
</arguments>
<msg timestamp="20200601 13:31:11.844" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestScenario_04 (TestCase, DateStamp, Test_Status, Count_Incorrect_OfficeName) VALUES ('TC_04_10', '2020-06-01 13:31:11', 'PENDING', 0) </msg>
<status status="PASS" starttime="20200601 13:31:11.843" endtime="20200601 13:31:11.845"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.842" endtime="20200601 13:31:11.845"></status>
</kw>
<kw name="Verify New Data Added" library="TC_04_10_SQL">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}'</arg>
</arguments>
<assign>
<var>${new_row_count}</var>
</assign>
<msg timestamp="20200601 13:31:11.846" level="INFO">Executing : Row Count  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_10' </msg>
<msg timestamp="20200601 13:31:11.847" level="INFO">${new_row_count} = 30</msg>
<status status="PASS" starttime="20200601 13:31:11.846" endtime="20200601 13:31:11.847"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.848" level="INFO">30</msg>
<status status="PASS" starttime="20200601 13:31:11.848" endtime="20200601 13:31:11.848"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${NEW_ROW_COUNT}</arg>
<arg>${PREVIOUS_ROW_COUNT + 1}</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.848" endtime="20200601 13:31:11.848"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Unverified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.849" level="INFO">${TestStatus} = 'Unverified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.848" endtime="20200601 13:31:11.849"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.845" endtime="20200601 13:31:11.849"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.839" endtime="20200601 13:31:11.849"></status>
</kw>
<kw name="Verify Insert Contains Correct Retrieved Data" library="TC_04_10">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>TC_04_10_SQL.Verify Last Input</arg>
</arguments>
<kw name="Verify Last Input" library="TC_04_10_SQL">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT TestCase, DateStamp, ${Test_Column_1} FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC LIMIT 1</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.850" level="INFO">Executing : Query  |  SELECT TestCase, DateStamp, Count_Incorrect_OfficeName FROM TestScenario_04 WHERE TestCase = 'TC_04_10' ORDER BY DateStamp DESC LIMIT 1 </msg>
<msg timestamp="20200601 13:31:11.851" level="INFO">${QueryResults} = (('TC_04_10', '2020-06-01 13:31:11', 0),)</msg>
<status status="PASS" starttime="20200601 13:31:11.850" endtime="20200601 13:31:11.851"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>'${QueryResults[0][0]}'=='${TestCase}'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.851" endtime="20200601 13:31:11.852"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][0]}</arg>
<arg>${TestCase}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.852" level="INFO">TC_04_10</msg>
<msg timestamp="20200601 13:31:11.852" level="INFO">TC_04_10</msg>
<status status="PASS" starttime="20200601 13:31:11.852" endtime="20200601 13:31:11.852"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${QueryResults[0][2]}==${TestValue_Column_1}</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Corrupt Insert Data'</arg>
</arguments>
<status status="PASS" starttime="20200601 13:31:11.852" endtime="20200601 13:31:11.852"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults[0][2]}</arg>
<arg>${TestValue_Column_1}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.853" level="INFO">0</msg>
<msg timestamp="20200601 13:31:11.853" level="INFO">0</msg>
<status status="PASS" starttime="20200601 13:31:11.853" endtime="20200601 13:31:11.853"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${TestStatus}== 'Corrupt Insert Data'</arg>
<arg>set test variable</arg>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TestStatus}</arg>
<arg>'Verified Insert Data'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.854" level="INFO">${TestStatus} = 'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.854" endtime="20200601 13:31:11.854"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.853" endtime="20200601 13:31:11.854"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.850" endtime="20200601 13:31:11.854"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.849" endtime="20200601 13:31:11.854"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.849" endtime="20200601 13:31:11.854"></status>
</kw>
<kw name="Update Newly Inserted Data" library="TC_04_10">
<kw name="Update Newly Inserted Data" library="TC_04_10_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.855" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.855" endtime="20200601 13:31:11.855"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${TestStatus}== 'Verified Insert Data'</arg>
<arg>Execute SQL String</arg>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = '${TestCase}' AND DateStamp = '${Insert_DateStamp}'</arg>
</arguments>
<msg timestamp="20200601 13:31:11.856" level="INFO">Executing : Execute SQL String  |  UPDATE TestScenario_04 SET Test_Status = 'PASSED' WHERE TestCase = 'TC_04_10' AND DateStamp = '2020-06-01 13:31:11' </msg>
<status status="PASS" starttime="20200601 13:31:11.856" endtime="20200601 13:31:11.858"></status>
</kw>
<msg timestamp="20200601 13:31:11.858" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200601 13:31:11.855" endtime="20200601 13:31:11.858"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.855" endtime="20200601 13:31:11.858"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.854" endtime="20200601 13:31:11.858"></status>
</kw>
<kw name="Log Updated Table" library="TC_04_10">
<kw name="Log All Rows" library="TC_04_10_SQL">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TestStatus}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.859" level="INFO">'Verified Insert Data'</msg>
<status status="PASS" starttime="20200601 13:31:11.859" endtime="20200601 13:31:11.859"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT * FROM TestScenario_04 WHERE TestCase = '${TestCase}' ORDER BY DateStamp DESC</arg>
</arguments>
<assign>
<var>${QueryResults}</var>
</assign>
<msg timestamp="20200601 13:31:11.859" level="INFO">Executing : Query  |  SELECT * FROM TestScenario_04 WHERE TestCase = 'TC_04_10' ORDER BY DateStamp DESC </msg>
<msg timestamp="20200601 13:31:11.861" level="INFO">${QueryResults} = (('TC_04_10', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, None, N...</msg>
<status status="PASS" starttime="20200601 13:31:11.859" endtime="20200601 13:31:11.861"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${QueryResults}</arg>
</arguments>
<msg timestamp="20200601 13:31:11.861" level="INFO">(('TC_04_10', '2020-06-01 13:31:11', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-06-01 12:48:31', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-06-01 12:47:54', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-06-01 12:38:54', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-06-01 12:38:09', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-06-01 12:31:45', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-06-01 11:48:06', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-31 17:10:41', 'PASSED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 12:17:29', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 12:16:20', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 12:14:54', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 12:13:58', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 12:13:19', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 12:08:02', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 12:05:35', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 11:28:03', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 11:24:35', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 11:23:33', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 11:08:50', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:24:28', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:24:17', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:23:51', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:22:44', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:16:09', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:09:28', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:07:49', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:05:04', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:03:06', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 10:01:27', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0), ('TC_04_10', '2020-05-29 09:59:16', 'FAILED', None, None, None, None, None, None, None, None, None, None, None, 0))</msg>
<status status="PASS" starttime="20200601 13:31:11.861" endtime="20200601 13:31:11.861"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.858" endtime="20200601 13:31:11.862"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.858" endtime="20200601 13:31:11.862"></status>
</kw>
<kw name="Disconnect" library="DB_Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200601 13:31:11.862" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200601 13:31:11.862" endtime="20200601 13:31:11.862"></status>
</kw>
<status status="PASS" starttime="20200601 13:31:11.862" endtime="20200601 13:31:11.862"></status>
</kw>
<tags>
<tag>TestCase_04_10: Check alphabetical value only in office field</tag>
</tags>
<status status="PASS" starttime="20200601 13:31:11.829" endtime="20200601 13:31:11.863" critical="yes"></status>
</test>
<doc>Test Suite for Test Scenario 04: Define top 3 offices by highest total sales</doc>
<status status="FAIL" starttime="20200601 13:31:11.326" endtime="20200601 13:31:11.863"></status>
</suite>
<statistics>
<total>
<stat pass="9" fail="1">Critical Tests</stat>
<stat pass="9" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">TestCase_04_01: Sum of sales all offices</stat>
<stat pass="1" fail="0">TestCase_04_02: Count of sales all offices</stat>
<stat pass="1" fail="0">TestCase_04_03: Average sum of sales all offices</stat>
<stat pass="1" fail="0">TestCase_04_04: Average count of sales all offices</stat>
<stat pass="1" fail="0">TestCase_04_05: Count of sales where office is NULL</stat>
<stat pass="1" fail="0">TestCase_04_06: Count of offices with no sales</stat>
<stat pass="0" fail="1">TestCase_04_07: Top 3 offices ranked by sales</stat>
<stat pass="1" fail="0">TestCase_04_08: Check there are no duplicate order-numbers</stat>
<stat pass="1" fail="0">TestCase_04_09: Check there are no NULL order-numbers</stat>
<stat pass="1" fail="0">TestCase_04_10: Check alphabetical value only in office field</stat>
</tag>
<suite>
<stat pass="9" fail="1" id="s1" name="Test Scenario 04">Test Scenario 04</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
